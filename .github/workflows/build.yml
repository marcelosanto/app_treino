name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"   # dispara apenas quando criar tag (ex: v0.1.0)

permissions:
  contents: write

jobs:
  build_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Instalar Dependências do Sistema (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            libxdo-dev \
            pkg-config \
            libssl-dev \
            build-essential

      - name: Cache das Dependências do Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Compilar Aplicação
        run: cargo build --release --features desktop

      - name: Upload do Artefato Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: target/release/app_treino

      - name: Upload do Artefato Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: target/release/app_treino.exe

  release:
    runs-on: ubuntu-latest
    needs: [build_desktop]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Criar Release com gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            ./dist/linux-build/app_treino \
            ./dist/windows-build/app_treino.exe \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"
