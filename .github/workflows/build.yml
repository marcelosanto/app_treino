name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_desktop:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      # --- CORREÇÃO ADICIONADA AQUI ---
      - name: Add Windows Target for Cross-Compilation
        run: rustup target add x86_64-pc-windows-gnu

      - name: Instalar Dependências do Sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            libxdo-dev \
            pkg-config \
            libssl-dev \
            build-essential \
            mingw-w64   # necessário para cross-compile Windows

      - name: Cache das Dependências do Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Baixar Dioxus CLI
        run: |
          curl -L https://github.com/DioxusLabs/dioxus/releases/download/v0.6.3/dx-x86_64-unknown-linux-gnu-v0.6.3.tar.gz -o dx.tar.gz
          tar -xzf dx.tar.gz
          sudo mv dx /usr/local/bin/

      - name: Compilar Aplicação Linux
        run: dx build --release --platform desktop --target x86_64-unknown-linux-gnu

      - name: Compilar Aplicação Windows (cross)
        run: dx build --release --platform desktop --target x86_64-pc-windows-gnu

      - name: Copiar builds para dist
        run: |
          mkdir -p dist/linux-build
          cp target/dx/app_treino/release/linux/app dist/linux-build/app_treino

          mkdir -p dist/windows-build
          cp target/dx/app_treino/release/windows/app.exe dist/windows-build/app_treino.exe

      - name: Upload do Artefato Linux
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/linux-build

      - name: Upload do Artefato Windows
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/windows-build

  release:
    runs-on: ubuntu-latest
    needs: [build_desktop]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Criar Release com gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            ./dist/linux-build/app_treino \
            ./dist/windows-build/app_treino.exe \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"