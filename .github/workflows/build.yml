name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Instalar Dependências do Sistema (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            libxdo-dev \
            pkg-config \
            libssl-dev \
            build-essential

      - name: Instalar WebView2 (Windows)
        if: runner.os == 'Windows'
        run: |
          powershell -Command "Invoke-WebRequest -Uri 'https://go.microsoft.com/fwlink/p/?LinkId=2124703' -OutFile 'MicrosoftEdgeWebView2Setup.exe'"
          powershell -Command ".\MicrosoftEdgeWebView2Setup.exe /silent /install"

      - name: Setup MSVC Dev Cmd (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      # 🔹 Cache das dependências Rust (Linux)
      - name: Cache das Dependências do Cargo (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 🔥 Baixar Dioxus CLI (Linux)
      - name: Baixar Dioxus CLI (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -L --fail https://github.com/DioxusLabs/dioxus/releases/download/v0.6.3/dx-x86_64-unknown-linux-gnu-v0.6.3.tar.gz -o dx.tar.gz
          tar -xzf dx.tar.gz
          sudo mv dx /usr/local/bin/

      # 🔥 Baixar Dioxus CLI (Windows)
      - name: Baixar Dioxus CLI (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -L --fail https://github.com/DioxusLabs/dioxus/releases/download/v0.6.3/dx-x86_64-pc-windows-msvc-v0.6.3.zip -o dx.zip
          powershell -Command "Expand-Archive -Path dx.zip -DestinationPath . -Force"
          echo "${{ github.workspace }}" >> $env:GITHUB_PATH

      # 🔨 Compilar aplicação
      - name: Compilar Aplicação
        run: dx build --release --platform desktop

      # 📦 Upload artefatos Linux
      - name: Upload do Artefato Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/app_treino

      # 📦 Upload artefatos Windows
      - name: Upload do Artefato Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/app_treino.exe

  release:
    runs-on: ubuntu-latest
    needs: [build_desktop]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          path: dist

      # 🔍 Listar arquivos baixados para depuração
      - name: Listar arquivos baixados
        run: ls -R dist

      # 🏷️ Criar release
      - name: Criar Release com gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            ./dist/linux-build/app_treino/app_treino \
            ./dist/windows-build/app_treino.exe \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"
