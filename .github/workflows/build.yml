name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_desktop:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu,x86_64-unknown-linux-musl,x86_64-unknown-linux-gnu,aarch64-linux-android

      - name: Instalar Dependências do Sistema
        run: |
          sudo apt-get update
          sudo add-apt-repository universe -y
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            pkg-config \
            libssl-dev \
            build-essential \
            mingw-w64 \
            musl-tools \
            libxdo-dev
          if ! pkg-config --modversion libxdo; then
            echo "libxdo-dev installation failed, proceeding with fallback build..."
          fi
          ldconfig -p | grep libxdo || echo "libxdo library not found in ldconfig"

      - name: Instalar JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Instalar Android SDK e NDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: '34'
          ndk-version: '26.3.11579264'
          accept-license: true

      - name: Configurar Rust Target para Android
        run: |
          rustup target add aarch64-linux-android
          rustup target list --installed

      - name: Verificar Instalação do Android NDK
        run: |
          echo "ANDROID_HOME=$ANDROID_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          if [ -d "$ANDROID_HOME/ndk/26.3.11579264" ]; then
            echo "NDK found at $ANDROID_HOME/ndk/26.3.11579264"
            echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/26.3.11579264" >> $GITHUB_ENV
          else
            echo "Error: NDK not found at $ANDROID_HOME/ndk/26.3.11579264"
            ls -la $ANDROID_HOME/ndk/ || echo "NDK directory not found"
            exit 1
          fi

      - name: Cache das Dependências do Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Baixar e Instalar Dioxus CLI
        run: |
          curl -L https://github.com/DioxusLabs/dioxus/releases/download/v0.6.3/dx-x86_64-unknown-linux-gnu-v0.6.3.tar.gz -o dx.tar.gz
          tar -xzf dx.tar.gz
          sudo mv dx /usr/local/bin/
          dx --version

      - name: Configurar Keystore para APK (Opcional)
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        if: env.KEYSTORE_BASE64 != ''
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > app_treino.keystore
          ls -la app_treino.keystore

      - name: Compilar Aplicação Linux
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:/usr/local/lib
        run: |
          echo "Attempting build with x86_64-unknown-linux-gnu..."
          if pkg-config --modversion libxdo; then
            echo "libxdo found, building with default features..."
            dx build --release --platform desktop --target x86_64-unknown-linux-gnu --verbose
          else
            echo "libxdo not found, building without tray-icon features..."
            dx build --release --platform desktop --target x86_64-unknown-linux-gnu --no-default-features --features "desktop" --verbose
          fi
          if [ -f "target/x86_64-unknown-linux-gnu/release/app_treino" ]; then
            file target/x86_64-unknown-linux-gnu/release/app_treino
            if ! file target/x86_64-unknown-linux-gnu/release/app_treino | grep -q "ELF 64-bit"; then
              echo "Error: target/x86_64-unknown-linux-gnu/release/app_treino is not an ELF 64-bit executable"
              exit 1
            fi
          else
            echo "Linux executable not found at target/x86_64-unknown-linux-gnu/release/app_treino, failing..."
            exit 1
          fi
          echo "Listing contents of target/dx/app_treino/release/linux/app/assets/"
          ls -la target/dx/app_treino/release/linux/app/assets/ || echo "Assets directory not found"

      - name: Compilar Aplicação Windows (cross)
        env:
          WINDRES_PATH: /usr/bin/x86_64-w64-mingw32-windres
          RUSTFLAGS: -C linker=x86_64-w64-mingw32-gcc
        run: |
          dx build --release --platform desktop --target x86_64-pc-windows-gnu --no-default-features --features "desktop" --verbose || echo "Windows build failed, continuing..."
          if [ -f "target/x86_64-pc-windows-gnu/release/app_treino.exe" ]; then
            mkdir -p dist/windows-build
            cp target/x86_64-pc-windows-gnu/release/app_treino.exe dist/windows-build/app_treino_windows.exe
            echo "Windows .exe copied to dist/windows-build/app_treino_windows.exe"
            file dist/windows-build/app_treino_windows.exe
            if ! file dist/windows-build/app_treino_windows.exe | grep -q "PE32+"; then
              echo "Error: dist/windows-build/app_treino_windows.exe is not a PE32+ executable"
              exit 1
            fi
          else
            echo "Windows executable not found, skipping..."
          fi
          echo "Listing contents of target/x86_64-pc-windows-gnu/release/"
          ls -la target/x86_64-pc-windows-gnu/release/ || echo "Windows build output not found"
          echo "Listing contents of dist/windows-build/"
          ls -la dist/windows-build/ || echo "Windows dist directory not found"

        - name: Compilar Aplicação Android
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          RUSTFLAGS: -C linker=/usr/local/lib/android/sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang
          AR_aarch64_linux_android: /usr/local/lib/android/sdk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64
        run: |
          echo "Building for Android (aarch64-linux-android)..."
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
          echo "NDK_HOME=$NDK_HOME"
          echo "RUSTFLAGS=$RUSTFLAGS"
          echo "AR_aarch64_linux_android=$AR_aarch64_linux_android"
          echo "JAVA_HOME=$JAVA_HOME"
          # Verify linker exists
          if [ -f "$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" ]; then
            echo "Linker found at $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
          else
            echo "Error: Linker not found at $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"
            exit 1
          fi
          # Build Rust binary with standard debug profile
          echo "Attempting debug build..."
          cargo build --target aarch64-linux-android --verbose --no-default-features --features mobile 2> cargo_debug_error.log || echo "Cargo debug build failed, see cargo_debug_error.log"
          cat cargo_debug_error.log
          if [ -f "target/aarch64-linux-android/debug/app_treino" ]; then
            echo "Rust debug binary found at target/aarch64-linux-android/debug/app_treino"
            # Copy binary to android-dev directory to match Dioxus CLI expectation
            mkdir -p target/aarch64-linux-android/android-dev
            cp target/aarch64-linux-android/debug/app_treino target/aarch64-linux-android/android-dev/app_treino
            # Update build.gradle to fix deprecation warning
            if [ -f "target/dx/app_treino/debug/android/app/app/build.gradle" ]; then
              echo "Updating build.gradle to fix deprecation warning..."
              sed -i '/android {/a\    buildFeatures {\n        buildConfig true\n    }' target/dx/app_treino/debug/android/app/app/build.gradle
            fi
            # Run dx build for debug
            dx build --platform android --verbose 2> dx_build_error.log || echo "Android debug build failed, see dx_build_error.log"
            cat dx_build_error.log
          else
            echo "Rust debug binary not found, trying release build..."
            cargo build --release --target aarch64-linux-android --verbose --no-default-features --features mobile 2> cargo_release_error.log || echo "Cargo release build failed, see cargo_release_error.log"
            cat cargo_release_error.log
            if [ -f "target/aarch64-linux-android/release/app_treino" ]; then
              echo "Rust release binary found at target/aarch64-linux-android/release/app_treino"
              # Update build.gradle for release
              if [ -f "target/dx/app_treino/release/android/app/app/build.gradle" ]; then
                echo "Updating build.gradle to fix deprecation warning..."
                sed -i '/android {/a\    buildFeatures {\n        buildConfig true\n    }' target/dx/app_treino/release/android/app/app/build.gradle
              fi
              dx build --release --platform android --verbose 2> dx_build_error.log || echo "Android release build failed, see dx_build_error.log"
              cat dx_build_error.log
            else
              echo "Error: No Rust binary found in target/aarch64-linux-android/"
              ls -la target/aarch64-linux-android/ || echo "Target directory not found"
              exit 1
            fi
          fi
          echo "Listing contents of target/aarch64-linux-android/"
          ls -la target/aarch64-linux-android/ || echo "Target directory not found"
          echo "Listing contents of target/aarch64-linux-android/debug/"
          ls -la target/aarch64-linux-android/debug/ || echo "Debug directory not found"
          echo "Listing contents of target/aarch64-linux-android/release/"
          ls -la target/aarch64-linux-android/release/ || echo "Release directory not found"
          echo "Listing contents of target/aarch64-linux-android/android-dev/"
          ls -la target/aarch64-linux-android/android-dev/ || echo "android-dev directory not found"
          echo "Listing contents of target/dx/app_treino/debug/android/"
          ls -la target/dx/app_treino/debug/android/ || echo "Android debug build output not found"
          # Debug: List all APKs in the Android project
          echo "Searching for APKs in target/dx/app_treino/"
          find target/dx/app_treino/ -type f -name "*.apk" || echo "No APKs found in target/dx/app_treino/"
          # Check for debug APK
          if [ -f "target/dx/app_treino/debug/android/app/app/build/outputs/apk/debug/app-debug.apk" ]; then
            mkdir -p dist/android-build
            cp target/dx/app_treino/debug/android/app/app/build/outputs/apk/debug/app-debug.apk dist/android-build/app_treino.apk
            echo "Android debug APK copied to dist/android-build/app_treino.apk"
            file dist/android-build/app_treino.apk
          # Check for release APK
          elif [ -f "target/dx/app_treino/debug/android/app/app/build/outputs/apk/release/app-release.apk" ]; then
            mkdir -p dist/android-build
            cp target/dx/app_treino/debug/android/app/app/build/outputs/apk/release/app-release.apk dist/android-build/app_treino.apk
            echo "Android release APK copied to dist/android-build/app_treino.apk"
            file dist/android-build/app_treino.apk
          else
            echo "Error: No APK found in target/dx/app_treino/debug/android/app/app/build/outputs/apk/"
            # Debug: Run Gradle manually to capture errors
            if [ -d "target/dx/app_treino/debug/android/app" ]; then
              echo "Running Gradle build manually..."
              cd target/dx/app_treino/debug/android/app
              ./gradlew build --stacktrace > gradle_build.log 2>&1
              cat gradle_build.log
              # List APKs again after manual Gradle build
              echo "Searching for APKs after manual Gradle build..."
              find app/build/outputs/apk/ -type f -name "*.apk" || echo "No APKs found in app/build/outputs/apk/"
              cd /home/runner/work/app_treino/app_treino
            fi
            exit 1
          fi
          echo "Listing contents of dist/android-build/"
          ls -la dist/android-build/ || echo "dist/android-build/ directory not found"

      - name: Debug Output Paths
        run: |
          echo "Listing contents of target/dx/app_treino/release/"
          ls -la target/dx/app_treino/release/ || echo "Directory target/dx/app_treino/release/ not found"
          echo "Listing contents of target/x86_64-unknown-linux-gnu/release/"
          ls -la target/x86_64-unknown-linux-gnu/release/ || echo "Linux build output not found"
          echo "Listing contents of target/x86_64-pc-windows-gnu/release/"
          ls -la target/x86_64-pc-windows-gnu/release/ || echo "Windows build output not found"
          echo "Listing contents of target/dx/app_treino/release/android/"
          ls -la target/dx/app_treino/release/android/ || echo "Android build output not found"
          echo "Listing contents of dist/android-build/"
          ls -la dist/android-build/ || echo "Android dist directory not found"

      - name: Preparar Artefatos para Release
        run: |
          mkdir -p dist/linux-build
          if [ -f "target/x86_64-unknown-linux-gnu/release/app_treino" ]; then
            cp target/x86_64-unknown-linux-gnu/release/app_treino dist/linux-build/app_treino_linux
            echo "Linux executable copied to dist/linux-build/app_treino_linux"
            file dist/linux-build/app_treino_linux
            if ! file dist/linux-build/app_treino_linux | grep -q "ELF 64-bit"; then
              echo "Error: dist/linux-build/app_treino_linux is not an ELF 64-bit executable"
              exit 1
            fi
          else
            echo "Linux executable not found at target/x86_64-unknown-linux-gnu/release/app_treino, failing..."
            exit 1
          fi
          mkdir -p dist/windows-build
          if [ -f "target/x86_64-pc-windows-gnu/release/app_treino.exe" ]; then
            cp target/x86_64-pc-windows-gnu/release/app_treino.exe dist/windows-build/app_treino_windows.exe
            echo "Windows .exe copied to dist/windows-build/app_treino_windows.exe"
            file dist/windows-build/app_treino_windows.exe
            if ! file dist/windows-build/app_treino_windows.exe | grep -q "PE32+"; then
              echo "Error: dist/windows-build/app_treino_windows.exe is not a PE32+ executable"
              exit 1
            fi
          else
            echo "Windows executable not found, skipping..."
          fi
          mkdir -p dist/android-build
          if [ -f "dist/android-build/app_treino.apk" ]; then
            echo "Android APK already copied to dist/android-build/app_treino.apk"
            file dist/android-build/app_treino.apk
          else
            echo "Android APK not found in dist/android-build/, skipping..."
          fi

      - name: Upload do Artefato Linux
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/linux-build/
          if-no-files-found: error

      - name: Upload do Artefato Windows
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/windows-build/
          if-no-files-found: warn

      - name: Upload do Artefato Android
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: dist/android-build/
          if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: [build_desktop]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Criar Release com gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "dist/linux-build/app_treino_linux" ]; then
            mv dist/linux-build/app_treino_linux dist/app_treino_linux
            file dist/app_treino_linux
            if ! file dist/app_treino_linux | grep -q "ELF 64-bit"; then
              echo "Error: dist/app_treino_linux is not an ELF 64-bit executable"
              exit 1
            fi
          else
            echo "Linux executable not found, failing..."
            exit 1
          fi
          WINDOWS_ARTIFACT=""
          if [ -f "dist/windows-build/app_treino_windows.exe" ]; then
            mv dist/windows-build/app_treino_windows.exe dist/app_treino_windows.exe
            file dist/app_treino_windows.exe
            if ! file dist/app_treino_windows.exe | grep -q "PE32+"; then
              echo "Error: dist/app_treino_windows.exe is not a PE32+ executable"
              exit 1
            fi
            WINDOWS_ARTIFACT="dist/app_treino_windows.exe#Windows"
          else
            echo "Windows .exe not found, skipping..."
          fi
          ANDROID_ARTIFACT=""
          if [ -f "dist/android-build/app_treino.apk" ]; then
            mv dist/android-build/app_treino.apk dist/app_treino.apk
            file dist/app_treino.apk
            ANDROID_ARTIFACT="dist/app_treino.apk#Android"
          else
            echo "Android APK not found, skipping..."
          fi
          gh release create ${{ github.ref_name }} \
            dist/app_treino_linux#Linux \
            $WINDOWS_ARTIFACT \
            $ANDROID_ARTIFACT \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"