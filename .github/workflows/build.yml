name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"  # dispara apenas quando criar tag (ex: v0.1.0)

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      # 1. Checkout do código
      - name: Checkout do Código
        uses: actions/checkout@v4

      # 2. Instalar Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-gnu,x86_64-unknown-linux-gnu
          override: true

      # 3. Build do app
      - name: Build App
        run: |
          cargo build --release
          # Criar pastas dist
          mkdir -p dist/linux-build
          mkdir -p dist/windows-build
          # Copiar builds corretos
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            copy target\dx\app_treino\release\windows\app.exe dist\windows-build\app_treino.exe
          else
            cp target/dx/app_treino/release/linux/app dist/linux-build/app_treino
          fi

      # 4. Upload artefatos
      - name: Upload Artefatos Linux
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/linux-build/app_treino

      - name: Upload Artefatos Windows
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/windows-build/app_treino.exe

  release:
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Download Artefatos Linux
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: dist/linux-build

      - name: Download Artefatos Windows
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: dist/windows-build

      - name: Criar Release
        run: |
          gh release create ${{ github.ref_name }} \
            dist/linux-build/app_treino \
            dist/windows-build/app_treino.exe \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
