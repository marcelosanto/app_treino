name: Rust Dioxus Multi-Platform Build

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build_desktop:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu

      - name: Instalar Dependências do Sistema
        run: |
          sudo apt-get update
          sudo add-apt-repository universe -y
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            pkg-config \
            libssl-dev \
            build-essential \
            mingw-w64 \
            zip \
            libxdo-dev || echo "libxdo-dev not available, proceeding without it..."
          # Verificar bibliotecas instaladas
          pkg-config --modversion libxdo || echo "libxdo not found, attempting build without libxdo features"
          ldconfig -p | grep libxdo || echo "libxdo library not found in ldconfig"

      - name: Cache das Dependências do Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Baixar e Instalar Dioxus CLI
        run: |
          curl -L https://github.com/DioxusLabs/dioxus/releases/download/v0.6.3/dx-x86_64-unknown-linux-gnu-v0.6.3.tar.gz -o dx.tar.gz
          tar -xzf dx.tar.gz
          sudo mv dx /usr/local/bin/
          dx --version

      - name: Compilar Aplicação Linux
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig
          LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:/usr/local/lib
        run: |
          if pkg-config --modversion libxdo; then
            echo "libxdo found, building with default features..."
            dx build --release --platform desktop --target x86_64-unknown-linux-gnu --verbose
          else
            echo "libxdo not found, building without hotkey features..."
            dx build --release --platform desktop --target x86_64-unknown-linux-gnu --no-default-features --features "desktop" --verbose
          fi

      - name: Compilar Aplicação Windows (cross)
        env:
          WINDRES_PATH: /usr/bin/x86_64-w64-mingw32-windres
          RUSTFLAGS: -C linker=x86_64-w64-mingw32-gcc
        run: |
          dx build --release --platform desktop --target x86_64-pc-windows-gnu --no-default-features --features "desktop" --verbose
          ls -la target/x86_64-pc-windows-gnu/release/

      - name: Debug Output Paths
        run: |
          echo "Listing contents of target/dx/app_treino/release/"
          ls -la target/dx/app_treino/release/ || echo "Directory target/dx/app_treino/release/ not found"
          echo "Listing contents of target/dx/app_treino/release/linux/ if exists"
          ls -la target/dx/app_treino/release/linux/ || echo "Directory linux/ does not exist"
          echo "Listing contents of target/dx/app_treino/release/windows/ if exists"
          ls -la target/dx/app_treino/release/windows/ || echo "Directory windows/ does not exist"

      - name: Preparar Artefatos para Release
        run: |
          # Prepara o artefato do Linux
          mkdir -p dist/linux-build
          if [ -d "target/dx/app_treino/release/linux/app" ]; then
            cp -r target/dx/app_treino/release/linux/app dist/linux-build/app_treino_linux
          else
            echo "Linux build not found, failing..."
            exit 1
          fi

          # Prepara e compacta o artefato do Windows
          mkdir -p dist/windows-build
          if [ -d "target/dx/app_treino/release/windows/app" ]; then
            cp -r target/dx/app_treino/release/windows/app dist/windows-build/app_treino_windows
            cd dist/windows-build
            zip -r app_treino_windows.zip app_treino_windows
          else
            echo "Windows build not found, skipping..."
          fi

      - name: Upload do Artefato Linux
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/linux-build/
          if-no-files-found: error

      - name: Upload do Artefato Windows
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/windows-build/
          if-no-files-found: warn

  release:
    runs-on: ubuntu-latest
    needs: [build_desktop]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Baixar Artefatos
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Criar Release com gh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mv dist/linux-build/app_treino_linux dist/app_treino_linux
          mv dist/windows-build/app_treino_windows.zip dist/app_treino_windows.zip || echo "Windows artifact not found, skipping..."
          gh release create ${{ github.ref_name }} \
            dist/app_treino_linux \
            dist/app_treino_windows.zip#Windows \
            --title "Release ${{ github.ref_name }}" \
            --notes "Build gerado automaticamente pelo GitHub Actions"